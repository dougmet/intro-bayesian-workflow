library(rstan)
library(tidyverse)
df <- read.csv("data.csv")
View(df)
model <- stan_model("pool.stan")
model <- stan_model("pool.stan")
model <- stan_model("pool.stan")
fit <- sampling(model, list(log_radon=df$log_radon,
basement = df$basement,
N=nrow(df)))
fit
source("stan_utility.R", local = util)
util = new.env()
source("stan_utility.R", local = util)
util$check_all_diagnostics(fit)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
df <- read.csv("data.csv")
View(df)
model <- stan_model("pool.stan")
fit <- sampling(model, list(log_radon=df$log_radon,
basement = df$basement,
N=nrow(df)))
fit
util$check_all_diagnostics(fit)
sample = extract(fit)
library(rstan)
util = new.env()
source("stan_utility.R", local = util)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
df <- read.csv("data.csv")
View(df)
model <- stan_model("pool.stan")
fit <- sampling(model, list(log_radon=df$log_radon,
basement = df$basement,
N=nrow(df)))
fit
sample = extract(fit)
util$check_all_diagnostics(fit)
ggplot(df, aes(basement, log_radon)) + geom_count() +
# This next snippet will select every 10th posterior sample and plot the
# fit lines corresponding to that sample. It's a good way to get a sense of
# the uncertainty / distribution of the posterior
sapply(seq(1, nrow(sample$alpha), 10), function(i) {
geom_abline(intercept = sample$alpha[i],
slope = sample$basement_effect[i], alpha=0.03)
})
# Shinystan!
launch_shinystan(fit)
install.packages("shinystan")
ppcs = as.data.frame(sample$yppc)
ggplot(ppcs) + geom_density(aes(V919)) + geom_vline(xintercept=df$log_radon[919])
# Shinystan!
shinystan::launch_shinystan(fit)
# Shinystan!
library(shinystan)
launch_shinystan(fit)
#############
## Check PPCs
#############
# Plot a single house's posterior predictive distribution (house 919 here)
ppcs = as.data.frame(sample$yppc)
ggplot(ppcs) + geom_density(aes(V919)) + geom_vline(xintercept=df$log_radon[919])
ppcs
sample
sample$yppc
names(sample)
model_unpooled <- stan_model("pool.stan")
fit <- sampling(model_unpooled, list(log_radon=df$log_radon,
basement = df$basement,
county = df$county,
N=nrow(df)))
fit
model_unpooled <- stan_model("unpooled.stan")
fit <- sampling(model_unpooled, list(log_radon=df$log_radon,
basement = df$basement,
county = df$county,
N=nrow(df)))
model_unpooled <- stan_model("unpooled.stan")
fit <- sampling(model_unpooled, list(log_radon=df$log_radon,
basement = df$basement,
county = df$county,
N=nrow(df)))
model_unpooled <- stan_model("unpooled.stan")
model_unpooled <- stan_model("unpooled.stan")
fit <- sampling(model_unpooled, list(log_radon=df$log_radon,
basement = df$basement,
county = df$county,
N=nrow(df)))
stan_model
model_unpooled <- stan_model("unpooled.stan")
fit <- sampling(model_unpooled, list(log_radon=df$log_radon,
basement = df$basement,
county = df$county,
N=nrow(df),
J=max(df$county)))
fit
model_hierachical <- stan_model("hierarchy.stan")
fit <- sampling(model_hierachical, list(log_radon=df$log_radon,
basement = df$basement,
county = df$county,
N=nrow(df),
J=max(df$county)))
fit
model_hierachical
sample = extract(fit)
sample
# This line just plots our data by basement indicator
ggplot(df, aes(basement, log_radon)) + geom_count() +
# This next snippet will select every 10th posterior sample and plot the
# fit lines corresponding to that sample. It's a good way to get a sense of
# the uncertainty / distribution of the posterior
sapply(seq(1, nrow(sample$alpha), 10), function(i) {
geom_abline(intercept = sample$alpha[i],
slope = sample$basement_effect[i], alpha=0.03)
})
names(sample)
sample$a
model_hierachical <- stan_model("hierarchy.stan")
model_hierachical <- stan_model("hierarchy.stan")
fit <- sampling(
model_hierachical,
list(
log_radon = df$log_radon,
basement = df$basement,
county = df$county,
N = nrow(df),
J = max(df$county)
)
)
names(fit)
sample = extract(fit)
#############
## Check PPCs
#############
# Plot a single house's posterior predictive distribution (house 919 here)
ppcs = as.data.frame(sample$yppc)
ggplot(ppcs) + geom_density(aes(V919)) + geom_vline(xintercept=df$log_radon[919])
launch_shinystan(model_hierachical)
launch_shinystan(as.shinystan(model_hierachical))
library(shinystan)
launch_shinystan(as.shinystan(model_hierachical))
launch_shinystan(fit)
range(df$log_uranium)
model_uranium <- stan_model("uranium.stan")
model_uranium <- stan_model("uranium.stan")
model_uranium <- stan_model("uranium.stan")
fit <- sampling(
model_uranium,
list(
log_radon = df$log_radon,
basement = df$basement,
county = df$county,
N = nrow(df),
J = max(df$county)
)
)
fit <- sampling(
model_uranium,
list(
log_radon = df$log_radon,
basement = df$basement,
county = df$county,
u = df$log_uranium,
N = nrow(df),
J = max(df$county)
)
)
fit
model_uranium_nc <- stan_model("uranium_nc.stan")
model_uranium_nc <- stan_model("uranium_nc.stan")
model_uranium_nc <- stan_model("uranium_nc.stan")
fit <- sampling(
model_uranium_nc,
list(
log_radon = df$log_radon,
basement = df$basement,
county = df$county,
u = df$log_uranium,
N = nrow(df),
J = max(df$county)
)
)
fit
